apiVersion: apps/v1
kind: Deployment
metadata:
  name: server-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      component: server
  template:
    metadata:
      labels:
        component: server
    spec:
      containers:
        - name: server
          image: stephengrider/multi-server
          ports:
            - containerPort: 5000
          env:
            - name: REDIS_HOST
              value: redis-cluster-ip-service # the name of the string in the file redis-cluster-ip-service.yaml (line 4)
            - name: REDIS_PORT
              value: '6379' # the port that is exposed from the service redis-cluster-ip-service.yaml
            - name: PGUSER
              value: postgres
            - name: PGHOST
              value: postgres-cluster-ip-service
            - name: PGPORT
              value: '5432'
            - name: PGDATABASE
              value: postgres
            - name: PGPASSWORD # our copy of our multi-server image will be looking for this PGPASSWORD
              valueFrom: # what is going to happen is that the environment vairable called PGPASSWORD for the multi-server will be taken from the secret PGPASSWORD
                secretKeyRef: # taken from k create secret generic pgpassword --from-literal PGPASSWORD=123abc
                  name: pgpassword
                  key: PGPASSWORD # it's confusing that the name of the environment variable above, and the key from the secret in this line are the same. We could call it shaya_password and just change the command above to shaya_password=123abc